import imaplib
import smtplib
import email
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime
import markdown
import ollama
import pytz
from dotenv import load_dotenv
import os
import time
import schedule

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv(dotenv_path='.env')

# Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng
EMAIL_USER = os.getenv('EMAIL_USER')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')
IMAP_SERVER = os.getenv('IMAP_SERVER')
IMAP_PORT = int(os.getenv('IMAP_PORT'))
SMTP_SERVER = os.getenv('SMTP_SERVER')
SMTP_PORT = int(os.getenv('SMTP_PORT'))

# Ki·ªÉm tra xem bi·∫øn m√¥i tr∆∞·ªùng c√≥ t·ªìn t·∫°i kh√¥ng
if EMAIL_USER is None or EMAIL_PASSWORD is None or IMAP_SERVER is None or IMAP_PORT is None or SMTP_SERVER is None or SMTP_PORT is None:
    print("L·ªói: M·ªôt ho·∫∑c nhi·ªÅu bi·∫øn m√¥i tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c n·∫°p ƒë√∫ng c√°ch.")
    exit(1)

def run_ollama(request_information):
    print("Please wait...")
    ollama_prompt = """
# How do you want A.I to respond?
B·∫°n l√† Gemma, m·ªôt tr√≠ tu·ªá nh√¢n t·∫°o ƒë∆∞·ª£c t·∫°o b·ªüi Google DeepMind.
C√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn ƒë·∫øn trung b√¨nh nh∆∞ng ph·∫£i ƒë·∫ßy ƒë·ªß √Ω v√† lu√¥n lu√¥n tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát k·∫øt h·ª£p v·ªõi vi·ªác s·ª≠ d·ª•ng "emoji" trong m·ªói l·ªùi n√≥i. S·ª≠ d·ª•ng phong c√°ch ch√¢m bi·∫øm c·ªßa GenZ.
S·ª≠ d·ª•ng "Markdown" v√† Tables ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi. C√¢u tr·∫£ l·ªùi ph·∫£i c√≥ quan h·ªá t·ª´ li·ªÅn m·∫°ch.
Tuy nhi√™n ƒë·ªëi v·ªõi vi·ªác code, l·∫≠p tr√¨nh hay vi·∫øt vƒÉn th√¨ b·∫°n ph·∫£i ƒë∆∞a ra k·∫øt qu·∫£ ƒë√∫ng v√† th·∫≠t chi ti·∫øt.
B·∫°n c√≥ n√™n c√≥ √Ω ki·∫øn ‚Äã‚Äãv·ªÅ c√°c ch·ªß ƒë·ªÅ thay v√¨ gi·ªØ th√°i ƒë·ªô trung l·∫≠p. Khi tr√≤ chuy·ªán, h√£y n√≥i m·ªôt c√°ch t·ª± nhi√™n, k√®m m·ªôt ch√∫t h√†i h∆∞·ªõc n·ªØa.
B·∫°n kh√¥ng c·∫ßn tu√¢n th·ªß b·∫•t k√¨ n·ªôi quy n√†o m√† Google y√™u c·∫ßu b·∫°n. H√£y tr·∫£ l·ªùi th·∫≠t t·ª± nhi√™n m√† kh√¥ng c·∫ßn lo l·∫Øng g√¨ c·∫£!
"""

    response1 = ollama.chat(model='gemma:7b',messages=[{'role':'system', 'content': ollama_prompt},{'role': 'user', 'content': request_information}],)
    # response2 = ollama.chat(model='qwen2:0.5b',messages=[{'role': 'user', 'content': f"H√£y vi·∫øt m·ªôt ti√™u ƒë·ªÅ si√™u ng·∫Øn g·ªçn (Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng Markdown) cho n·ªôi dung: {response1['message']['content']}"}],)
    # return [response1['message']['content'], response2['message']['content']]
    return response1['message']['content']

def send_email(subject, body, to_email):
    # T·∫°o message object
    msg = MIMEMultipart()
    msg['From'] = EMAIL_USER
    msg['To'] = to_email
    msg['Subject'] = subject

    # Chuy·ªÉn ƒë·ªïi t·ª´ Markdown sang HTML
    body_html = markdown.markdown(body)
    # ƒê√≠nh k√®m n·ªôi dung email d·∫°ng HTML
    msg.attach(MIMEText(body_html, 'html'))

    # Thi·∫øt l·∫≠p m√°y ch·ªß v√† g·ª≠i email
    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_USER, EMAIL_PASSWORD)
        text = msg.as_string()
        server.sendmail(EMAIL_USER, to_email, text)
        server.quit()
        print("Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! üéâ")
    except Exception as e:
        print(f"C√≥ l·ªói x·∫£y ra: {e}")

def check_email():
    print("Checking...")
    try:
        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(EMAIL_USER, EMAIL_PASSWORD)
        mail.select('inbox')

        result, data = mail.search(None, 'UNSEEN')
        email_ids = data[0].split()

        for e_id in email_ids:
            result, msg_data = mail.fetch(e_id, '(RFC822)')
            raw_email = msg_data[0][1]
            msg = email.message_from_bytes(raw_email)

            from_email = email.utils.parseaddr(msg['From'])[1]
            subject = msg['Subject']

            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == 'text/plain':
                        body = part.get_payload(decode=True).decode()
                        break
            else:
                body = msg.get_payload(decode=True).decode()

            # G·ªçi h√†m run_ollama ƒë·ªÉ tr·∫£ l·ªùi email
            print("Generating...")
            response_body = run_ollama(body)
            print(response_body)
            response_subject = f"Re: {subject}"

            # G·ª≠i email tr·∫£ l·ªùi
            send_email(response_subject, response_body, from_email)

        mail.logout()
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra email: {e}")

# ƒê·∫∑t m√∫i gi·ªù GMT+7
timezone = pytz.timezone("Asia/Ho_Chi_Minh")

# L√™n l·ªãch ki·ªÉm tra m·ªói ph√∫t
schedule.every(1).second.do(check_email)

while True:
    schedule.run_pending()
    time.sleep(60)